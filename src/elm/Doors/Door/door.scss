$door-brown: #986600;
$door-perspective: perspective(300px);
$door-duration: 500ms;

$border-small: 3px;
$border-large: 6px;
$breakpoint: 600px;

$cheating-opacity: 0.5;
$cheating-duration: 250ms;

$frame-color: #333;
// using this instead of opacity because the background of the door
// shines through the door border
$dimmed-frame-color: #999;


.door {
    position: relative;
    min-width: 100px;
    margin: 0 10px;

    flex-shrink: 0;
    flex-grow: 1;
    flex-basis: auto;

    // we don't want the doors too huge on big screens
    // max-width: 200px;

    // always keep the same ratio, when squeezed down
    // on smaller screens
    &:before {
        display: block;
        content: "";
        width: 100%;
        padding-top: 150%;
    }
}

.door__frame {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    transition: opacity $cheating-duration;

    .is-cheating & {
        border-color: $dimmed-frame-color;
    }

    @mixin borders($width){
        border: $width solid $frame-color;
        border-left: $width*2 solid $frame-color;
        border-radius: 4px;
    }

    @include borders($border-small);

    @media (min-width: $breakpoint){
        @include borders($border-large);
    }
}



// is inside the .door__frame
.door__door {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: 20%;

    background-color: $door-brown;
    border: $border-small solid $frame-color;
    border-left: 0;

    cursor: pointer;
    transform: $door-perspective;
    transform-origin: 0% 50%;
    transition:
        border-width $door-duration,
        transform $door-duration,
        background-color $cheating-duration;

    .is-open & {
        background-image: linear-gradient(to left, rgba(0,0,0,0.4), $door-brown);
        border-width: $border-small * 3;
        border-left-width: 0;
        transform: $door-perspective rotateY(80deg);
    }

    .is-selected & {
        .door__sign {
            background-color: #ffe661;
        }
    }

    // dim the door if they're cheating
    .is-cheating & {
        background-color: rgba($door-brown, $cheating-opacity);
        border-color: $dimmed-frame-color;
    }

    // remove door shading when they're cheating AND the door is open
    .is-cheating .is-open & {
        background-image: none;
    }



    // for larger screens
    @media (min-width: $breakpoint){
        border: $border-large solid $frame-color;
        border-left: 0;

        .is-open & {
            border-width: $border-large * 3;
            border-left-width: 0;
        }
    }
}

.door__knob {
    position: absolute;
    top: 50%;
    right: 10px;
    width: 20px;
    height: 20px;
    background-color: $frame-color;
    border-radius: 50%;
    transform: translateY(-50%);

    display: none;

    .is-cheating & {
        background-color: $dimmed-frame-color;
    }

    @media (min-width: $breakpoint){
        display: block;
    }

}

.door__sign {
    display: inline-block;
    padding: 10px 20px;
    background: white;
    border: 3px solid $frame-color;
}


/**
 * make the prize hidden while the door is shutting (@keyframes delay-show)
 * this prevents the user from seeing the prize after it's been
 * scrambled as the door is animating closed
 */
.door__prize {

    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    img {
        max-width: 70%;
        max-height: 70%;
    }

    user-select: none; // prevent double click select of prize img

    animation: delay-show $door-duration;

    .is-open & {
        animation: none;
    }
}

// when the door is closing, hide the prize,
// then animate it back in when the door is shut
@keyframes delay-show {
    0%{
        opacity: 0;
    }
    70% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}
